[{"/Users/akramnour/monk-underground-1/src/index.js":"1","/Users/akramnour/monk-underground-1/src/App.js":"2","/Users/akramnour/monk-underground-1/src/App.test.js":"3","/Users/akramnour/monk-underground-1/src/exportAsImage.js":"4"},{"size":324,"mtime":1668928653837,"results":"5","hashOfConfig":"6"},{"size":10066,"mtime":1672703536746,"results":"7","hashOfConfig":"6"},{"size":246,"mtime":1666421269885,"results":"8","hashOfConfig":"6"},{"size":1216,"mtime":1667537167447,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pd4mvi",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akramnour/monk-underground-1/src/index.js",[],[],"/Users/akramnour/monk-underground-1/src/App.js",["23","24","25","26","27","28","29","30","31","32","33"],[],"import { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport image from './tapped_in_fasho.jpg';\nimport image2 from './not_tapped_in.jpg';\nimport image3 from './bro.jpg';\nimport exportAsImage from \"./exportAsImage\";\nimport gradient from './gradient.jpg'\n\n\n\nfunction App() {\n\n    const exportRef = useRef();\n    const CLIENT_ID = \"d0db6dd1a5ef4b7f8a493a84259ae21c\"\n    const REDIRECT_URI = \"https://monkunderground.com\"\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\n    const RESPONSE_TYPE = \"token\"\n    const show_dialog = \"true\"\n    const SCOPE = \"user-top-read\"\n\n    const [ token, setToken ] = useState(\"\");\n    const [artists, setArtists] = useState([]);\n    const [obscure, setObscure] = useState([]);\n    const [lowID, setLowID] = useState(\"\");\n    const [topTracks, setTopTracks] = useState([]); //depends on lowID idFound and token : should be tracks[0].preview_url IF it's not null\n    const [artistsFound, setArtistsFound] = useState(false);\n    const [idFound, setIDFound] = useState(false);\n    const [obscureFound, setObscureFound] = useState(false);\n    const [tracksFound, setTracksFound] = useState(false);     //for testing                                                                        \n\n    //let lowName = \"\"; //for debugging\n    //let lowID = \"\"; //for get artist endpoint\n    let ignore = false; //don't call useeffect functions when it's true\n    //let artistsFound = false;\n    //let idFound = false;\n\n    useEffect( () => {\n        const hash = window.location.hash;\n        let token = window.localStorage.getItem(\"token\"); //localstorage allows us to store key value pairs even after window is closed\n\n        if (!token && hash) { //token is empty and hash is assigned a value\n            token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1]; //& means take everything before the &, [1] means take the second part of the split\n            //console.log(token);\n            window.location.hash = \"\"; //make it empty again (WHY?)\n            window.localStorage.setItem(\"token\", token);\n        }\n\n        setToken(token);\n        //console.log(token);\n\n    }, []);\n\n    const logout = () => {\n        setToken(\"\");\n        window.localStorage.removeItem(\"token\");\n    }\n\n    useEffect(() => {\n        if (token){\n            const getTopArtists = async () => {\n                try {\n                    const {data} = await axios.get(\"https://api.spotify.com/v1/me/top/artists\", {\n                        headers: {\n                            Authorization: `Bearer ${token}`\n                        },\n                        params: {\n                            limit: 25, \n                            time_range: \"medium_term\"\n                        }\n                    })\n                    //console.log(data);\n                    setArtists(data.items);\n                    setArtistsFound(true);\n                }\n                catch {\n                    logout(); //logs you out if token expired\n                }\n            };\n            getTopArtists();\n            //ignore = true; //JUST FOR NOW, REMOVE WHEN GETOBSCURE ARTIST IS DONE\n        }\n    }, [token]);\n\n    useEffect(() => {\n        if (artistsFound) {\n            console.log(artists);\n            let lowScore = 101;\n            const getLowID = () => {\n                //console.log(\"GET LOW ID called\");\n                //console.log(artists);\n                artists.map(getLowScore); //does this for each item\n                function getLowScore(item) {\n                    if (item.popularity < lowScore) { //add 2nd and 3rd: && item.id != lowestScoreID\n                                lowScore = item.popularity;\n                                //console.log(lowScore);\n                                //lowName = item.name;\n                                setLowID(item.id);\n                            }\n                        }\n                //console.log(lowName);\n                //console.log(100 - lowScore); //undrgrnd score\n                setIDFound(true);\n            };\n            getLowID();\n        }\n    }, [artistsFound, artists]);\n\n    useEffect(() => {\n        if (idFound){\n            const getObscureArtist = async () => {\n                const {data} = await axios.get(`https://api.spotify.com/v1/artists/${lowID}`, {\n                        headers: {\n                            Authorization: `Bearer ${token}`\n                        }\n                    })\n                    setObscure(data);\n                    setObscureFound(true);\n                    //console.log(obscure);\n                };\n            getObscureArtist();\n            //ignore = true;\n        }\n    }, [idFound, lowID, token]);\n\n    /*useEffect(() => { //TESTING\n        console.log(obscure);\n        //console.log(topTracks.tracks[0]);\n        //console.log(topTracks.tracks[0].preview_url);\n\n    }, [obscureFound, obscure, tracksFound, topTracks]);*/\n\n    useEffect(() => {\n        if (idFound){\n            const getTopTracks = async () => {\n                const {data} = await axios.get(`https://api.spotify.com/v1/artists/${lowID}/top-tracks`, {\n                        headers: {\n                            Authorization: `Bearer ${token}`\n                        },\n                        params: {\n                            market: \"US\"\n                        }\n                    })\n                    setTopTracks(data);\n                    setTracksFound(true);\n                    //console.log(obscure);\n                };\n            getTopTracks();\n            //ignore = true;\n        }\n    }, [idFound, lowID, token]);\n\n    const renderObscure = () => {\n        if (obscure.length != 0){ //need to put this elsewhere\n            let imagePath = './bro2.png';\n            if (obscure.popularity <= 50){\n                imagePath = './tapped_in_fasho2.png';\n            }\n            else if (obscure.popularity <= 75){\n                imagePath = './not_tapped_in2.png';\n                \n            }\n\n        return (\n\n                    <div id=\"myartist\" className='headtext'>\n                        <div ref={exportRef} className='headimage' key={obscure.id}>\n                            <img src={require(`${imagePath}`)} alt=\"My Top Underground Artist\" /> <img/>\n                                    <div className=\"artistname\">\n                                    <a href={obscure.external_urls.spotify} className=\"artistnamelink\"> {obscure.name}</a>\n                                    </div>\n                                <div className = \"scorebox\">  \n                                    <div className='score'>\n                                     {100 - obscure.popularity + \"%\"}  \n                                    </div>  \n                                </div>      \n                                                 \n                                {obscure.images.length ? <img className='artistcover' width={\"30%\"} src={obscure.images[0].url} alt=\"\"/> : <div>No Image</div>}\n                                <div className = \"smalltext\">\n                            <p>Music data, artist images, and album covers are provided by Spotify.</p><p> monk:underground is not affiliated, associated, authorized, endorsed by,or in any way officially connected with Spotify. Spotify is a trademark of Spotify AB.</p>  \n                        </div>      \n                        </div>\n                        {topTracks.length != 0 && topTracks.tracks[0].preview_url != null ? \n                        <div className='audio'>\n                                                   <p className='home-small'> Listen to {topTracks.tracks[0].name} by {obscure.name} </p>\n                                    <audio controls>\n                                        <source src={topTracks.tracks[0].preview_url} ></source>\n                                    </audio>\n                        </div>\n                        :\n                        <div>\n                            \n                        </div>     \n                        }\n                    </div>\n            )\n        }\n          \n    }\n\n    return (\n        <div className=\"App\">\n            \n            <header className=\"App-header\">\n                    <h1>\n                        monk<span className='smaller'>:underground</span>\n                    </h1>\n\n                        {!token ?\n                        <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${SCOPE}&show_dialog=${show_dialog}`}>LOGIN TO SPOTIFY</a>\n                        :\n                        <div>\n                            <button className='logout' onClick={logout}> LOGOUT </button>\n                            {/* <button className='save' onClick={() => exportAsImage(exportRef.current, \"My Top Underground Artist\")}>SAVE</button> */}\n                            <p className='home-small'>T. Monk gave you an underground score of {100 - obscure.popularity + \"%\"}</p>\n                        </div>\n                        }\n            </header>  \n\n            <body>       \n                            {token ?\n                            renderObscure()\n                            :\n                            <div className='homepage'> \n                            {/* <img className='gradient' src = {gradient}/> */}\n                                <h3> WANNA KNOW YOUR TOP UNDERGROUND ARTIST?</h3>\n                              <p className='home-small'> We define \"underground\" as artists who are up and coming or outside of the mainstream. This is found by taking your top 25 artists in the last 6 months and ranking them based on popularity. The least popular is your top underground artist.</p><p className='home-small'> This website is made possible with the use of the Spotify Web API.</p>\n                            </div>\n                            }           \n            </body>    \n\n        </div>\n    );\n}\n\nexport default App;  ","/Users/akramnour/monk-underground-1/src/App.test.js",[],[],"/Users/akramnour/monk-underground-1/src/exportAsImage.js",[],[],{"ruleId":"34","severity":1,"message":"35","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":13},{"ruleId":"34","severity":1,"message":"38","line":5,"column":8,"nodeType":"36","messageId":"37","endLine":5,"endColumn":14},{"ruleId":"34","severity":1,"message":"39","line":6,"column":8,"nodeType":"36","messageId":"37","endLine":6,"endColumn":14},{"ruleId":"34","severity":1,"message":"40","line":7,"column":8,"nodeType":"36","messageId":"37","endLine":7,"endColumn":21},{"ruleId":"34","severity":1,"message":"41","line":8,"column":8,"nodeType":"36","messageId":"37","endLine":8,"endColumn":16},{"ruleId":"34","severity":1,"message":"42","line":29,"column":12,"nodeType":"36","messageId":"37","endLine":29,"endColumn":24},{"ruleId":"34","severity":1,"message":"43","line":30,"column":12,"nodeType":"36","messageId":"37","endLine":30,"endColumn":23},{"ruleId":"34","severity":1,"message":"44","line":34,"column":9,"nodeType":"36","messageId":"37","endLine":34,"endColumn":15},{"ruleId":"45","severity":1,"message":"46","line":154,"column":28,"nodeType":"47","messageId":"48","endLine":154,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":168,"column":99,"nodeType":"51","endLine":168,"endColumn":105},{"ruleId":"45","severity":1,"message":"46","line":183,"column":43,"nodeType":"47","messageId":"48","endLine":183,"endColumn":45},"no-unused-vars","'image' is defined but never used.","Identifier","unusedVar","'image2' is defined but never used.","'image3' is defined but never used.","'exportAsImage' is defined but never used.","'gradient' is defined but never used.","'obscureFound' is assigned a value but never used.","'tracksFound' is assigned a value but never used.","'ignore' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]